Pythonic interface for basic ovs-ofctl commands
Currently, match fields support L1 port and L2 src & dst

Example workflow:
    All examples here assume switch 's1' has datapath ID of 0x1

    The equivalent of 'ovs-ofctl add-flow s1 in_port=1,dl_dst=00:00:00:00:00:02,actions=output:2'
    This installs a flow table rule that matches any packets coming in from
    port 1 with destination MAC 00:00:00:00:00:02, and forwards it via port 2
    >>> import ryu_ofctl
    >>> flow = ryu_ofctl.FlowEntry()
    >>> act = ryu_ofctl.OutputAction(2)
    >>>
    >>> flow.in_port = 1
    >>> flow.dl_dst = "00:00:00:00:00:02"
    >>> flow.addAction(act)
    >>>
    >>> dpid = 0x1
    >>> ryu_ofctl.insertFlow(dpid, flow)
    'Success!'
    >>>

    The equivalent of 'ovs-ofctl add-flow s1 in_port=2,actions=output:3,output:1'
    This installs a flow table rule that matches any packets coming in from
    port 1 and forwards a copy of it via port 3 and port 1
    >>> import ryu_ofctl
    >>> flow = ryu_ofctl.FlowEntry()
    >>> act1 = ryu_ofctl.OutputAction(3)
    >>> act2 = ryu_ofctl.OutputAction(1)
    >>>
    >>> flow.in_port = 2
    >>> flow.addAction(act1)
    >>> flow.addAction(act2)
    >>>
    >>> dpid = 0x1
    >>> ryu_ofctl.insertFlow(dpid, flow)
    'Success!'
    >>>


    The equivalent of 'ovs-ofctl del-flows s1 in_port=1'
    This deletes any flow table rules that matches on input port of 1
    >>> import ryu_ofctl
    >>> flow = ryu_ofctl.FlowEntry()
    >>>
    >>> flow.in_port = 1
    >>>
    >>> dpid = 0x1
    >>> ryu_ofctl.deleteFlow(dpid, flow)
    'Success!'
    >>>


    The equivalent of 'ovs-ofctl del-flows s1' (flushing the flow table)
    This deletes all flow table rules in the switch
    >>> import ryu_ofctl
    >>>
    >>> dpid = 0x1
    >>> ryu_ofctl.deleteAllFlows(dpid)
    'Success!'
    >>>


    To get the list of current actions in a FlowEntry object, or print them
    >>> import ryu_ofctl
    >>> flow = ryu_ofctl.FlowEntry()
    >>> act1 = ryu_ofctl.OutputAction(3)
    >>> act2 = ryu_ofctl.OutputAction(1)
    >>>
    >>> flow.addAction(act1)
    >>> flow.addAction(act2)
    >>>
    >>> flow.getActions()
    [<ryu_ofctl.flow_entry.OutputAction object at 0x19317d0>, <ryu_ofctl.flow_entry.OutputAction object at 0x1931810>]
    >>>
    >>> flow.printActions()
    OutputAction: 3
    OutputAction: 1
    >>>

